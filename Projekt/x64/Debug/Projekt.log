  Projekt.cpp
  JohnsonNormal.cpp
  Unknown compiler version - please run the configure tests and report the results
c:\users\winmo\documents\github\zbpgprahs\projekt\johnsonnormal.cpp(46): warning C4244: '=': conversion from 'double' to 'base::weight', possible loss of data
c:\users\winmo\documents\github\zbpgprahs\projekt\johnsonnormal.cpp(36): warning C4390: ';': empty controlled statement found; is this the intent?
  JohnsonBoost.cpp
  Unknown compiler version - please run the configure tests and report the results
c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility(2229): error C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility(2216): note: see declaration of 'std::_Copy_impl'
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\extent_gen.hpp(49): note: see reference to function template instantiation '_OutIt std::copy<const boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type>,boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type>>(_InIt,_InIt,_OutIt)' being compiled
          with
          [
              _OutIt=boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type> ,
              _InIt=const boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type> 
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\extent_gen.hpp(46): note: while compiling class template member function 'boost::detail::multi_array::extent_gen<2>::extent_gen(const boost::detail::multi_array::extent_gen<1> &,const boost::detail::multi_array::extent_gen<2>::range &)'
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\extent_gen.hpp(62): note: see reference to function template instantiation 'boost::detail::multi_array::extent_gen<2>::extent_gen(const boost::detail::multi_array::extent_gen<1> &,const boost::detail::multi_array::extent_gen<2>::range &)' being compiled
  c:\users\winmo\documents\github\zbpgprahs\projekt\johnsonboost.cpp(23): note: see reference to class template instantiation 'boost::detail::multi_array::extent_gen<2>' being compiled
c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1086): error C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\multi_array_ref.hpp(375): note: see reference to function template instantiation '_OutIt std::transform<const boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type>,__int64*,boost::const_mem_fun_ref_t<__int64,boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
          with
          [
              _OutIt=__int64 *,
              _InIt=const boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type> ,
              _Fn1=boost::const_mem_fun_ref_t<__int64,boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type>>
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\multi_array_ref.hpp(368): note: while compiling class template member function 'void boost::const_multi_array_ref<T,2,T *>::init_from_extent_gen(const boost::detail::multi_array::extent_gen<2> &)'
          with
          [
              T=base::weight
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\multi_array_ref.hpp(115): note: see reference to function template instantiation 'void boost::const_multi_array_ref<T,2,T *>::init_from_extent_gen(const boost::detail::multi_array::extent_gen<2> &)' being compiled
          with
          [
              T=base::weight
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\multi_array_ref.hpp(418): note: see reference to class template instantiation 'boost::const_multi_array_ref<T,2,T *>' being compiled
          with
          [
              T=base::weight
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array.hpp(113): note: see reference to class template instantiation 'boost::multi_array_ref<T,2>' being compiled
          with
          [
              T=base::weight
          ]
  c:\users\winmo\documents\github\zbpgprahs\projekt\johnsonboost.cpp(23): note: see reference to class template instantiation 'boost::multi_array<base::weight,2,std::allocator<T>>' being compiled
          with
          [
              T=base::weight
          ]
c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility(2810): error C4996: 'std::_Fill_n': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility(2797): note: see declaration of 'std::_Fill_n'
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\array.hpp(188): note: see reference to function template instantiation '_OutIt std::fill_n<bool*,boost::array<bool,2>::size_type,T>(_OutIt,_Diff,const _Ty &)' being compiled
          with
          [
              _OutIt=bool *,
              T=bool,
              _Diff=boost::array<bool,2>::size_type,
              _Ty=bool
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\array.hpp(187): note: while compiling class template member function 'void boost::array<bool,2>::fill(const T &)'
          with
          [
              T=bool
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\array.hpp(185): note: see reference to function template instantiation 'void boost::array<bool,2>::fill(const T &)' being compiled
          with
          [
              T=bool
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\storage_order.hpp(76): note: see reference to class template instantiation 'boost::array<bool,2>' being compiled
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\multi_array_ref.hpp(354): note: see reference to class template instantiation 'boost::general_storage_order<2>' being compiled
  Graph.cpp
  Unknown compiler version - please run the configure tests and report the results
c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\graph\adjacency_matrix.hpp(78): warning C4800: 'const char': forcing value to bool 'true' or 'false' (performance warning)
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\graph\adjacency_matrix.hpp(927): note: see reference to function template instantiation 'bool boost::detail::get_edge_exists<char>(const EdgeProxy &,...)' being compiled
          with
          [
              EdgeProxy=char
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\graph\adjacency_matrix.hpp(947): note: see reference to function template instantiation 'std::pair<boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor>,bool> boost::add_edge<boost::undirectedS,boost::no_property,boost::no_property,boost::no_property,std::allocator<bool>,EP>(unsigned __int64,unsigned __int64,const EP2 &,boost::adjacency_matrix<Directed,boost::no_property,boost::no_property,boost::no_property,std::allocator<bool>> &)' being compiled
          with
          [
              Directed=boost::undirectedS,
              EP=boost::no_property,
              EP2=boost::no_property
          ]
  c:\users\winmo\documents\github\zbpgprahs\projekt\graph.cpp(55): note: see reference to function template instantiation 'std::pair<boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor>,bool> boost::add_edge<boost::undirectedS,boost::no_property,boost::no_property,boost::no_property,std::allocator<bool>>(unsigned __int64,unsigned __int64,boost::adjacency_matrix<Directed,boost::no_property,boost::no_property,boost::no_property,std::allocator<bool>> &)' being compiled
          with
          [
              Directed=boost::undirectedS
          ]
  FloydWarshallNormal.cpp
  Unknown compiler version - please run the configure tests and report the results
c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility(2229): error C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility(2216): note: see declaration of 'std::_Copy_impl'
  c:\users\winmo\documents\github\zbpgprahs\projekt\floydwarshallnormal.cpp(26): note: see reference to function template instantiation '_OutIt std::copy<base::weight*,base::weight*>(_InIt,_InIt,_OutIt)' being compiled
          with
          [
              _OutIt=base::weight *,
              _InIt=base::weight *
          ]
  FloydWarshallBoost.cpp
  Unknown compiler version - please run the configure tests and report the results
c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility(2229): error C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility(2216): note: see declaration of 'std::_Copy_impl'
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\extent_gen.hpp(49): note: see reference to function template instantiation '_OutIt std::copy<const boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type>,boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type>>(_InIt,_InIt,_OutIt)' being compiled
          with
          [
              _OutIt=boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type> ,
              _InIt=const boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type> 
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\extent_gen.hpp(46): note: while compiling class template member function 'boost::detail::multi_array::extent_gen<2>::extent_gen(const boost::detail::multi_array::extent_gen<1> &,const boost::detail::multi_array::extent_gen<2>::range &)'
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\extent_gen.hpp(62): note: see reference to function template instantiation 'boost::detail::multi_array::extent_gen<2>::extent_gen(const boost::detail::multi_array::extent_gen<1> &,const boost::detail::multi_array::extent_gen<2>::range &)' being compiled
  c:\users\winmo\documents\github\zbpgprahs\projekt\floydwarshallboost.cpp(13): note: see reference to class template instantiation 'boost::detail::multi_array::extent_gen<2>' being compiled
c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1086): error C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\multi_array_ref.hpp(375): note: see reference to function template instantiation '_OutIt std::transform<const boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type>,__int64*,boost::const_mem_fun_ref_t<__int64,boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
          with
          [
              _OutIt=__int64 *,
              _InIt=const boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type> ,
              _Fn1=boost::const_mem_fun_ref_t<__int64,boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type>>
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\multi_array_ref.hpp(368): note: while compiling class template member function 'void boost::const_multi_array_ref<T,2,T *>::init_from_extent_gen(const boost::detail::multi_array::extent_gen<2> &)'
          with
          [
              T=base::weight
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\multi_array_ref.hpp(115): note: see reference to function template instantiation 'void boost::const_multi_array_ref<T,2,T *>::init_from_extent_gen(const boost::detail::multi_array::extent_gen<2> &)' being compiled
          with
          [
              T=base::weight
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\multi_array_ref.hpp(418): note: see reference to class template instantiation 'boost::const_multi_array_ref<T,2,T *>' being compiled
          with
          [
              T=base::weight
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array.hpp(113): note: see reference to class template instantiation 'boost::multi_array_ref<T,2>' being compiled
          with
          [
              T=base::weight
          ]
  c:\users\winmo\documents\github\zbpgprahs\projekt\floydwarshallboost.cpp(13): note: see reference to class template instantiation 'boost::multi_array<base::weight,2,std::allocator<T>>' being compiled
          with
          [
              T=base::weight
          ]
c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility(2810): error C4996: 'std::_Fill_n': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility(2797): note: see declaration of 'std::_Fill_n'
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\array.hpp(188): note: see reference to function template instantiation '_OutIt std::fill_n<bool*,boost::array<bool,2>::size_type,T>(_OutIt,_Diff,const _Ty &)' being compiled
          with
          [
              _OutIt=bool *,
              T=bool,
              _Diff=boost::array<bool,2>::size_type,
              _Ty=bool
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\array.hpp(187): note: while compiling class template member function 'void boost::array<bool,2>::fill(const T &)'
          with
          [
              T=bool
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\array.hpp(185): note: see reference to function template instantiation 'void boost::array<bool,2>::fill(const T &)' being compiled
          with
          [
              T=bool
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\storage_order.hpp(76): note: see reference to class template instantiation 'boost::array<bool,2>' being compiled
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\multi_array\multi_array_ref.hpp(354): note: see reference to class template instantiation 'boost::general_storage_order<2>' being compiled
  Exploration.cpp
  Unknown compiler version - please run the configure tests and report the results
c:\users\winmo\documents\github\zbpgprahs\projekt\exploration.cpp(66): warning C4267: 'argument': conversion from 'size_t' to 'const unsigned int', possible loss of data
c:\users\winmo\documents\github\zbpgprahs\projekt\exploration.cpp(77): warning C4838: conversion from 'int' to 'size_t' requires a narrowing conversion
c:\users\winmo\documents\github\zbpgprahs\projekt\exploration.cpp(93): warning C4838: conversion from 'int' to 'size_t' requires a narrowing conversion
c:\users\winmo\documents\github\zbpgprahs\projekt\exploration.cpp(110): warning C4838: conversion from 'int' to 'size_t' requires a narrowing conversion
c:\users\winmo\documents\github\zbpgprahs\projekt\exploration.cpp(134): warning C4267: 'argument': conversion from 'size_t' to 'const unsigned int', possible loss of data
c:\users\winmo\documents\github\zbpgprahs\projekt\exploration.cpp(134): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
  DijkstraNormal.cpp
  Unknown compiler version - please run the configure tests and report the results
c:\users\winmo\documents\github\zbpgprahs\projekt\dijkstranormal.cpp(29): warning C4244: 'initializing': conversion from 'double' to 'int', possible loss of data
  DijkstraBoost.cpp
  Unknown compiler version - please run the configure tests and report the results
  DFSnormal.cpp
  Unknown compiler version - please run the configure tests and report the results
c:\users\winmo\documents\github\zbpgprahs\projekt\dfsnormal.cpp(16): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
c:\users\winmo\documents\github\zbpgprahs\projekt\dfsnormal.cpp(31): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
  DFSboost.cpp
  Unknown compiler version - please run the configure tests and report the results
c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\graph\adjacency_matrix.hpp(78): warning C4800: 'const char': forcing value to bool 'true' or 'false' (performance warning)
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\graph\adjacency_matrix.hpp(285): note: see reference to function template instantiation 'bool boost::detail::get_edge_exists<char>(const EdgeProxy &,...)' being compiled
          with
          [
              EdgeProxy=char
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\graph\adjacency_matrix.hpp(284): note: while compiling class template member function 'boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor> boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor>>::dereference(void) const'
          with
          [
              Directed=boost::undirectedS
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\iterator\iterator_facade.hpp(514): note: see reference to function template instantiation 'boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor> boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor>>::dereference(void) const' being compiled
          with
          [
              Directed=boost::undirectedS
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility(571): note: see reference to class template instantiation 'boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor>>' being compiled
          with
          [
              Directed=boost::undirectedS
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\detail\iterator.hpp(83): note: see reference to class template instantiation 'std::iterator_traits<Iterator>' being compiled
          with
          [
              Iterator=boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<boost::undirectedS>::vertex_descriptor>>
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\iterator\iterator_categories.hpp(161): note: see reference to class template instantiation 'boost::detail::iterator_traits<Iterator>' being compiled
          with
          [
              Iterator=boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<boost::undirectedS>::vertex_descriptor>>
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\iterator\filter_iterator.hpp(33): note: see reference to class template instantiation 'boost::iterator_traversal<Iterator>' being compiled
          with
          [
              Iterator=boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<boost::undirectedS>::vertex_descriptor>>
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\iterator\filter_iterator.hpp(45): note: see reference to class template instantiation 'boost::detail::filter_iterator_base<Predicate,Iterator>' being compiled
          with
          [
              Predicate=boost::detail::does_edge_exist,
              Iterator=boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<boost::undirectedS>::vertex_descriptor>>
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility(571): note: see reference to class template instantiation 'boost::filter_iterator<boost::detail::does_edge_exist,boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor>>>' being compiled
          with
          [
              Directed=boost::undirectedS
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\detail\iterator.hpp(83): note: see reference to class template instantiation 'std::iterator_traits<Iterator>' being compiled
          with
          [
              Iterator=boost::filter_iterator<boost::detail::does_edge_exist,boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<boost::undirectedS>::vertex_descriptor>>>
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\graph\adjacency_iterator.hpp(55): note: see reference to class template instantiation 'boost::detail::iterator_traits<OutEdgeIter>' being compiled
          with
          [
              OutEdgeIter=boost::filter_iterator<boost::detail::does_edge_exist,boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<boost::undirectedS>::vertex_descriptor>>>
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\graph\adjacency_matrix.hpp(569): note: see reference to class template instantiation 'boost::adjacency_iterator_generator<boost::adjacency_matrix<boost::undirectedS,boost::no_property,boost::no_property,boost::no_property,std::allocator<bool>>,unsigned __int64,boost::filter_iterator<boost::detail::does_edge_exist,boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor>>>>' being compiled
          with
          [
              Directed=boost::undirectedS
          ]
  c:\users\winmo\documents\github\zbpgprahs\projekt\graph.h(42): note: see reference to class template instantiation 'boost::adjacency_matrix<boost::undirectedS,boost::no_property,boost::no_property,boost::no_property,std::allocator<bool>>' being compiled
  DataExp.cpp
  Unknown compiler version - please run the configure tests and report the results
  BFSnormal.cpp
  Unknown compiler version - please run the configure tests and report the results
c:\users\winmo\documents\github\zbpgprahs\projekt\bfsnormal.cpp(26): warning C4267: 'argument': conversion from 'size_t' to 'const int', possible loss of data
  BFSboost.cpp
  Unknown compiler version - please run the configure tests and report the results
c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\graph\adjacency_matrix.hpp(78): warning C4800: 'const char': forcing value to bool 'true' or 'false' (performance warning)
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\graph\adjacency_matrix.hpp(285): note: see reference to function template instantiation 'bool boost::detail::get_edge_exists<char>(const EdgeProxy &,...)' being compiled
          with
          [
              EdgeProxy=char
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\graph\adjacency_matrix.hpp(284): note: while compiling class template member function 'boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor> boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor>>::dereference(void) const'
          with
          [
              Directed=boost::undirectedS
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\iterator\iterator_facade.hpp(514): note: see reference to function template instantiation 'boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor> boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor>>::dereference(void) const' being compiled
          with
          [
              Directed=boost::undirectedS
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility(571): note: see reference to class template instantiation 'boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor>>' being compiled
          with
          [
              Directed=boost::undirectedS
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\detail\iterator.hpp(83): note: see reference to class template instantiation 'std::iterator_traits<Iterator>' being compiled
          with
          [
              Iterator=boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<boost::undirectedS>::vertex_descriptor>>
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\iterator\iterator_categories.hpp(161): note: see reference to class template instantiation 'boost::detail::iterator_traits<Iterator>' being compiled
          with
          [
              Iterator=boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<boost::undirectedS>::vertex_descriptor>>
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\iterator\filter_iterator.hpp(33): note: see reference to class template instantiation 'boost::iterator_traversal<Iterator>' being compiled
          with
          [
              Iterator=boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<boost::undirectedS>::vertex_descriptor>>
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\iterator\filter_iterator.hpp(45): note: see reference to class template instantiation 'boost::detail::filter_iterator_base<Predicate,Iterator>' being compiled
          with
          [
              Predicate=boost::detail::does_edge_exist,
              Iterator=boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<boost::undirectedS>::vertex_descriptor>>
          ]
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility(571): note: see reference to class template instantiation 'boost::filter_iterator<boost::detail::does_edge_exist,boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor>>>' being compiled
          with
          [
              Directed=boost::undirectedS
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\detail\iterator.hpp(83): note: see reference to class template instantiation 'std::iterator_traits<Iterator>' being compiled
          with
          [
              Iterator=boost::filter_iterator<boost::detail::does_edge_exist,boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<boost::undirectedS>::vertex_descriptor>>>
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\graph\adjacency_iterator.hpp(55): note: see reference to class template instantiation 'boost::detail::iterator_traits<OutEdgeIter>' being compiled
          with
          [
              OutEdgeIter=boost::filter_iterator<boost::detail::does_edge_exist,boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<boost::undirectedS>::vertex_descriptor>>>
          ]
  c:\users\winmo\desktop\boost_1_55_0\boost_1_55_0\boost\graph\adjacency_matrix.hpp(569): note: see reference to class template instantiation 'boost::adjacency_iterator_generator<boost::adjacency_matrix<boost::undirectedS,boost::no_property,boost::no_property,boost::no_property,std::allocator<bool>>,unsigned __int64,boost::filter_iterator<boost::detail::does_edge_exist,boost::detail::undir_adj_matrix_out_edge_iter<unsigned __int64,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char>>>,unsigned __int64,boost::detail::matrix_edge_desc_impl<boost::undirected_tag,boost::adjacency_matrix_traits<Directed>::vertex_descriptor>>>>' being compiled
          with
          [
              Directed=boost::undirectedS
          ]
  c:\users\winmo\documents\github\zbpgprahs\projekt\graph.h(42): note: see reference to class template instantiation 'boost::adjacency_matrix<boost::undirectedS,boost::no_property,boost::no_property,boost::no_property,std::allocator<bool>>' being compiled
  BellmanFordNormal.cpp
  Unknown compiler version - please run the configure tests and report the results
  BellmanFordBoost.cpp
  Unknown compiler version - please run the configure tests and report the results
  BeginExploration.cpp
  Unknown compiler version - please run the configure tests and report the results
  Generating Code...
